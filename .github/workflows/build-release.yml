name: Build and Release Portable ZIP (WinPython Minimal, Cleaned, GUI, Offline)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and extract WinPython Minimal
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/winpython/winpython/releases/download/16.6.20250620final/Winpython64-3.12.10.1dot.exe" -OutFile "WinpythonMinimal.exe"
          7z x WinpythonMinimal.exe -owp

      - name: Find WinPython python.exe
        id: find_python
        shell: pwsh
        run: |
          $pyexe = Get-ChildItem -Path wp -Recurse -Filter python.exe | Select-Object -First 1
          echo "pythonexe=$($pyexe.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          $pydir = Split-Path $pyexe.FullName
          echo "pydir=$pydir" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install dependencies in WinPython
        shell: pwsh
        run: |
          & "${{ env.pythonexe }}" -m pip install --upgrade pip
          & "${{ env.pythonexe }}" -m pip install tensorflow==2.15.0 decimer rdkit-pypi opencv-python pillow

      - name: Download DECIMER model in cache and copy to project
        shell: pwsh
        run: |
          & "${{ env.pythonexe }}" -c "
          import os
          from DECIMER import predict_SMILES
          import shutil
          from pathlib import Path
          
          dummy = 'dummy.png'
          with open(dummy, 'wb') as f:
              f.write(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\xdacd\xf8\x0f\x00\x01\x05\x01\x02\xa2Z\xb2\x00\x00\x00\x00IEND\xaeB`\x82')
          
          try:
              predict_SMILES(dummy)
          except Exception:
              pass
          
          possible_paths = [
              Path.home() / '.cache' / 'decimer',
              Path.home() / '.data' / 'DECIMER-V2',
              Path.home() / '.data' / 'DECIMER-V2' / 'DECIMER_HandDrawn_model.zip'
          ]
          
          found = False
          target = Path('models/decimer')
          if target.exists():
              shutil.rmtree(target)
          for path in possible_paths:
              if path.exists():
                  if path.is_dir():
                      shutil.copytree(path, target)
                      print(f'Modèle/dossier copié de {path} vers {target}')
                      found = True
                      break
                  elif path.is_file():
                      target.mkdir(parents=True, exist_ok=True)
                      shutil.copy2(path, target / path.name)
                      print(f'Fichier zip copié de {path} vers {target / path.name}')
                      found = True
                      break
          if not found:
              raise RuntimeError('Impossible de trouver un modèle DECIMER après téléchargement.')
          "

      - name: Clean WinPython distribution (keep only minimal)
        shell: pwsh
        run: |
          # Nettoie les fichiers/dossiers inutiles pour la portabilité
          Remove-Item -Recurse -Force $env:pydir\*.txt -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\*.bat -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\*.exe -Exclude python.exe
          Remove-Item -Recurse -Force $env:pydir\*.lnk -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\Settings -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\scripts -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\tmp -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\tools -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\doc -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\notebooks -ErrorAction SilentlyContinue
          # Nettoie pip, wheel, tests...
          $sitepk = "$env:pydir\Lib\site-packages"
          Remove-Item -Recurse -Force "$sitepk\pip*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\setuptools*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\wheel*" -ErrorAction SilentlyContinue
          Get-ChildItem -Path $sitepk -Directory | Where-Object { $_.Name -match "test|tests|__pycache__|examples" } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

      - name: Copy GUI script and models
        shell: pwsh
        run: |
          Copy-Item main_gui.py $env:pydir\
          Copy-Item -Recurse models $env:pydir\models

      - name: Prepare run.bat
        shell: pwsh
        run: |
          Set-Content "$env:pydir\run.bat" "@echo off`ncd /d %%~dp0`npython.exe main_gui.py`npause"

      - name: Prepare README
        shell: pwsh
        run: |
          Set-Content "$env:pydir\README.txt" "# Lancement du GUI OCSR`n`nDouble-cliquez sur run.bat pour lancer le logiciel."

      - name: Zip final portable WinPython
        shell: pwsh
        run: |
          7z a molar_mass_portable_winpython.zip "$env:pydir\*"

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: molar_mass_portable_winpython
          path: molar_mass_portable_winpython.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Portable ZIP GUI WinPython Minimal (tkinter, Tensorflow, DECIMER, RDKit uniquement). Prêt à l'emploi : aucun téléchargement, ni installation nécessaire.
          files: molar_mass_portable_winpython.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
