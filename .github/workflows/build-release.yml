name: Build and Release GUI EXE (Offline/Portable/Optimized)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt
          pip install pyinstaller

      - name: Restore DECIMER model cache
        id: decimer-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/decimer
          key: decimer-model-v1

      - name: Download DECIMER model in cache and copy to project
        run: |
          python -c "
          import os
          from DECIMER import predict_SMILES
          import shutil
          from pathlib import Path
          
          dummy = 'dummy.png'
          with open(dummy, 'wb') as f:
              f.write(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\xdacd\xf8\x0f\x00\x01\x05\x01\x02\xa2Z\xb2\x00\x00\x00\x00IEND\xaeB`\x82')
          
          try:
              predict_SMILES(dummy)
          except Exception:
              pass
          
          possible_paths = [
              Path.home() / '.cache' / 'decimer',
              Path.home() / '.data' / 'DECIMER-V2',
              Path.home() / '.data' / 'DECIMER-V2' / 'DECIMER_HandDrawn_model.zip'
          ]
          
          found = False
          target = Path('models/decimer')
          if target.exists():
              shutil.rmtree(target)
          for path in possible_paths:
              if path.exists():
                  if path.is_dir():
                      shutil.copytree(path, target)
                      print(f'Modèle/dossier copié de {path} vers {target}')
                      found = True
                      break
                  elif path.is_file():
                      target.mkdir(parents=True, exist_ok=True)
                      shutil.copy2(path, target / path.name)
                      print(f'Fichier zip copié de {path} vers {target / path.name}')
                      found = True
                      break
          if not found:
              raise RuntimeError('Impossible de trouver un modèle DECIMER après téléchargement.')
          "

      - name: Download UPX
        run: |
          curl -L -o upx.zip https://github.com/upx/upx/releases/download/v4.2.3/upx-4.2.3-win64.zip
          tar -xf upx.zip

      - name: Build exe with PyInstaller (offline + modèles + GUI + UPX)
        run: |
          pyinstaller --onefile --windowed main_gui.py --add-data "models/decimer;models/decimer" --upx-dir upx-4.2.3-win64

      - name: Move EXE to artifact root
        run: |
          move dist\main_gui.exe main_gui.exe

      - name: Upload exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: ocsr-app-exe
          path: main_gui.exe

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Version offline GUI, compressée avec UPX. L’exécutable contient tous les modèles et dépendances, aucune connexion internet nécessaire.
          files: main_gui.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
