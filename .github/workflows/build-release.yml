name: Build and Release Portable ZIP (GUI, offline, pre-installed)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Python embeddable
        run: |
          curl -L -o python-embed.zip https://www.python.org/ftp/python/3.11.9/python-3.11.9-embed-amd64.zip
          mkdir python
          tar -xf python-embed.zip -C python

      - name: Prepare site-packages and Lib
        run: |
          mkdir -p python/Lib/site-packages

      - name: Install dependencies in site-packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install --target=python/Lib/site-packages -r requirement.txt
          python -m pip install --target=python/Lib/site-packages pywin32  # Pour compatibilité clipboard

      - name: Install DECIMER for model download
        run: |
          python -m pip install decimer
      
      - name: Download DECIMER model in cache and copy to project
        run: |
          python -c "
          import os
          from DECIMER import predict_SMILES
          import shutil
          from pathlib import Path
          
          dummy = 'dummy.png'
          with open(dummy, 'wb') as f:
              f.write(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\xdacd\xf8\x0f\x00\x01\x05\x01\x02\xa2Z\xb2\x00\x00\x00\x00IEND\xaeB`\x82')
          
          try:
              predict_SMILES(dummy)
          except Exception:
              pass
          
          possible_paths = [
              Path.home() / '.cache' / 'decimer',
              Path.home() / '.data' / 'DECIMER-V2',
              Path.home() / '.data' / 'DECIMER-V2' / 'DECIMER_HandDrawn_model.zip'
          ]
          
          found = False
          target = Path('models/decimer')
          if target.exists():
              shutil.rmtree(target)
          for path in possible_paths:
              if path.exists():
                  if path.is_dir():
                      shutil.copytree(path, target)
                      print(f'Modèle/dossier copié de {path} vers {target}')
                      found = True
                      break
                  elif path.is_file():
                      target.mkdir(parents=True, exist_ok=True)
                      shutil.copy2(path, target / path.name)
                      print(f'Fichier zip copié de {path} vers {target / path.name}')
                      found = True
                      break
          if not found:
              raise RuntimeError('Impossible de trouver un modèle DECIMER après téléchargement.')
          "

      - name: Prepare run.bat
        run: |
          echo @echo off > run.bat
          echo cd /d %%~dp0 >> run.bat
          echo python\python.exe main_gui.py >> run.bat
          echo pause >> run.bat

      - name: Prepare README
        run: |
          Set-Content README.txt "# Lancement du GUI OCSR"
          Add-Content README.txt ""
          Add-Content README.txt "Double-cliquez sur run.bat pour lancer le logiciel."


      - name: Prepare final ZIP
        run: |
          7z a molar_mass_gui_portable.zip python models main_gui.py run.bat requirement.txt README.txt

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: molar_mass_gui_portable
          path: molar_mass_gui_portable.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Portable ZIP GUI, prêt à l'emploi. Aucun téléchargement, ni installation nécessaire.
          files: molar_mass_gui_portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
