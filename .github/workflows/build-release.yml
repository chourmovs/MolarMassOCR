name: Build and Release Portable ZIP (WinPython Minimal, Cleaned, GUI, Offline)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and extract WinPython Minimal
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/winpython/winpython/releases/download/7.1.20240203final/Winpython64-3.11.8.0dot.exe" -OutFile "WinpythonMinimal.exe"
          7z x WinpythonMinimal.exe -owp

      - name: Find WinPython python.exe
        id: find_python
        shell: pwsh
        run: |
          $pyexe = Get-ChildItem -Path wp -Recurse -Filter python.exe | Select-Object -First 1
          echo "pythonexe=$($pyexe.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          $pydir = Split-Path $pyexe.FullName
          echo "pydir=$pydir" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set Intel Optimizations Env Vars
        shell: pwsh
        run: |
          echo "TF_ENABLE_ONEDNN_OPTS=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "MKL_NUM_THREADS=4" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "OMP_NUM_THREADS=4" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Remove any NumPy 2.x before install
        shell: pwsh
        run: |
          & "${{ env.pythonexe }}" -m pip uninstall -y numpy

      - name: Install dependencies with compatible NumPy (NumPy 1.x)
        shell: pwsh
        run: |
          & "${{ env.pythonexe }}" -m pip install --upgrade pip
          # D'abord forcer la version NumPy 1.x compatible RDKit (ex: 1.26.4)
          & "${{ env.pythonexe }}" -m pip install "numpy<2"
          # Afficher la version pour debug
          & "${{ env.pythonexe }}" -c "import numpy; print('NumPy version:', numpy.__version__)"
          # Installer les autres packages scientifiques (dans l'ordre, RDKit APRES NumPy)
          & "${{ env.pythonexe }}" -m pip install rdkit-pypi opencv-python pillow matplotlib gradio-client


      - name: Clean WinPython distribution (keep only minimal)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force $env:pydir\*.txt -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\*.bat -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\*.exe -Exclude python.exe
          Remove-Item -Recurse -Force $env:pydir\*.lnk -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\Settings -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\scripts -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\tmp -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\tools -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\doc -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\notebooks -ErrorAction SilentlyContinue

          $sitepk = "$env:pydir\Lib\site-packages"
          Remove-Item -Recurse -Force "$sitepk\pip*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\setuptools*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\wheel*" -ErrorAction SilentlyContinue
          Get-ChildItem -Path $sitepk -Directory | Where-Object { $_.Name -match "test|tests|__pycache__|examples" } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

      - name: Copy pythonw.exe from bin/
        shell: pwsh
        run: |
          Copy-Item bin\pythonw.exe $env:pydir\

      - name: Copy GUI script
        shell: pwsh
        run: |
          Copy-Item main_gui.pyw $env:pydir\

      - name: Prepare run.bat
        shell: pwsh
        run: |
          Set-Content "$env:pydir\run.bat" '@echo off
          cd /d %~dp0
          start /min "" pythonw.exe main_gui.pyw'

      - name: Prepare README
        shell: pwsh
        run: |
          Set-Content "$env:pydir\README.txt" "# Lancement du GUI OCSRnnDouble-cliquez sur run.bat pour lancer le logiciel."

      - name: Zip final portable WinPython
        shell: pwsh
        run: |
          7z a -mx=1 molar_mass_portable_winpython.zip "$env:pydir\*"

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: molar_mass_portable_winpython
          path: molar_mass_portable_winpython.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Portable ZIP GUI WinPython Minimal (tkinter, Tensorflow, DECIMER, RDKit uniquement). Optimisé Intel CPU (AVX2/oneDNN/MKL). Prêt à l'emploi : aucun téléchargement ni installation nécessaire.
          files: molar_mass_portable_winpython.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
