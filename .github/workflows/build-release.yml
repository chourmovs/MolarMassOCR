name: Build and Release Portable ZIP (WinPython Minimal, Cleaned, GUI, Offline)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and extract WinPython Minimal
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/winpython/winpython/releases/download/7.1.20240203final/Winpython64-3.11.8.0dot.exe" -OutFile "WinpythonMinimal.exe"
          7z x WinpythonMinimal.exe -owp

      - name: Find WinPython python.exe
        id: find_python
        shell: pwsh
        run: |
          $pyexe = Get-ChildItem -Path wp -Recurse -Filter python.exe | Select-Object -First 1
          echo "pythonexe=$($pyexe.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          $pydir = Split-Path $pyexe.FullName
          echo "pydir=$pydir" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set Intel Optimizations Env Vars
        shell: pwsh
        run: |
          echo "TF_ENABLE_ONEDNN_OPTS=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "MKL_NUM_THREADS=4"       | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "OMP_NUM_THREADS=4"       | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install ALL dependencies (sans numpy explicite)
        shell: pwsh
        run: |
          & "${{ env.pythonexe }}" -m pip install --upgrade pip
          & "${{ env.pythonexe }}" -m pip install rdkit-pypi opencv-python pillow matplotlib gradio-client

      - name: Force NumPy 1.x in the end
        shell: pwsh
        run: |
          & "${{ env.pythonexe }}" -m pip install --force-reinstall "numpy<2"
          & "${{ env.pythonexe }}" -c "import numpy; print('NumPy version (final):', numpy.__version__)"
          & "${{ env.pythonexe }}" -m pip freeze

      - name: Clean WinPython distribution (keep only minimal)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force $env:pydir\*.txt -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\*.bat -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\*.exe -Exclude python.exe
          Remove-Item -Recurse -Force $env:pydir\*.lnk -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\Settings -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\scripts -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\tmp -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\tools -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\doc -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force $env:pydir\notebooks -ErrorAction SilentlyContinue

          $sitepk = "$env:pydir\Lib\site-packages"
          Remove-Item -Recurse -Force "$sitepk\pip*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\setuptools*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\wheel*" -ErrorAction SilentlyContinue
          Get-ChildItem -Path $sitepk -Directory | Where-Object { $_.Name -match "test|tests|__pycache__|examples" } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

      - name: Copy pythonw.exe from bin/
        shell: pwsh
        run: |
          Copy-Item bin\pythonw.exe $env:pydir\

      - name: Copy GUI script
        shell: pwsh
        run: |
          Copy-Item main_gui.pyw $env:pydir\

      - name: Prepare run.bat
        shell: pwsh
        run: |
          Set-Content "$env:pydir\run.bat" '@echo off
          cd /d %~dp0
          start /min "" pythonw.exe main_gui.pyw'

      - name: Prepare README
        shell: pwsh
        run: |
          Set-Content "$env:pydir\README.txt" "# Lancement du GUI OCSR`r`nDouble-cliquez sur run.bat pour lancer le logiciel."

      - name: Ultra clean site-packages
        shell: pwsh
        run: |
          $sitepk = "$env:pydir\Lib\site-packages"
          # Supprimer dossiers inutiles dans chaque package
          Get-ChildItem -Path $sitepk -Directory -Recurse | Where-Object { $_.Name -match "test|tests|testing|benchmarks|docs|examples|__pycache__" } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          # Supprimer tous les .pyc, .pyo, .a, .lib, .c, .h, .pdb
          Get-ChildItem -Path $sitepk -Recurse -Include *.pyc,*.pyo,*.a,*.lib,*.c,*.h,*.pdb | Remove-Item -Force -ErrorAction SilentlyContinue
          # Supprimer les .dist-info inutiles (ne garde que rdkit, Pillow, gradio-client, opencv, matplotlib, numpy)
          Get-ChildItem -Path $sitepk -Directory | Where-Object {
            $_.Name -like "*.dist-info" -and
            $_.Name -notlike "rdkit-*.dist-info" -and
            $_.Name -notlike "Pillow-*.dist-info" -and
            $_.Name -notlike "gradio_client-*.dist-info" -and
            $_.Name -notlike "opencv_python-*.dist-info" -and
            $_.Name -notlike "matplotlib-*.dist-info" -and
            $_.Name -notlike "numpy-*.dist-info"
          } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          # Optionnel : clean encore les traces de pip
          Remove-Item -Recurse -Force "$sitepk\pip*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\setuptools*" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$sitepk\wheel*" -ErrorAction SilentlyContinue

      - name: UPX compress python executables (optional)
        if: ${{ always() }}
        shell: pwsh
        run: |
          # UPX doit Ãªtre dans le PATH ou Ã  cÃ´tÃ© (sinon skip sans planter)
          try {
            & upx --best --lzma "$env:pydir\python.exe"
            & upx --best --lzma "$env:pydir\pythonw.exe"
          } catch { Write-Host "UPX not found, skipping EXE compression." }

      - name: Zip final portable WinPython
        shell: pwsh
        run: |
          7z a -mx=1 molar_mass_portable_winpython.zip "$env:pydir\*"

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # ðŸ”’ SCANS LOCAUX : DEFENDER + CLAMAV
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Update Microsoft Defender signatures
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          function Get-MpCmdPath {
            $cmd = Get-Command MpCmdRun.exe -ErrorAction SilentlyContinue
            if ($cmd) {
              return ($cmd.Source ?? $cmd.Path ?? $cmd.CommandType)
            }
            $candidates = @(
              "C:\Program Files\Microsoft Defender\MpCmdRun.exe",
              "C:\Program Files\Windows Defender\MpCmdRun.exe"
            )
            foreach ($c in $candidates) {
              if (Test-Path $c) { return $c }
            }
            throw "MpCmdRun.exe introuvable"
          }

          try {
            if (Get-Command Update-MpSignature -ErrorAction SilentlyContinue) {
              Update-MpSignature
            } else {
              $mp = Get-MpCmdPath
              & "$mp" -SignatureUpdate
            }
          } catch {
            Write-Warning "Update signatures failed: $($_.Exception.Message). Je poursuis."
          }

      - name: Microsoft Defender scan (ZIP)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          function Get-MpCmdPath {
            $cmd = Get-Command MpCmdRun.exe -ErrorAction SilentlyContinue
            if ($cmd) {
              return ($cmd.Source ?? $cmd.Path ?? $cmd.CommandType)
            }
            $candidates = @(
              "C:\Program Files\Microsoft Defender\MpCmdRun.exe",
              "C:\Program Files\Windows Defender\MpCmdRun.exe"
            )
            foreach ($c in $candidates) {
              if (Test-Path $c) { return $c }
            }
            throw "MpCmdRun.exe introuvable"
          }

          $mp = Get-MpCmdPath
          & "$mp" -Scan -ScanType 3 -File "$PWD\molar_mass_portable_winpython.zip"


      - name: Install ClamAV (via Chocolatey) and update db
        shell: pwsh
        run: |
          choco install clamav -y
          $clam = "C:\Program Files\ClamAV"
          if (!(Test-Path "$clam")) { throw "ClamAV non installÃ©" }
          Copy-Item "$clam\conf_examples\freshclam.conf.sample" "$clam\freshclam.conf" -Force
          # DÃ©finir un miroir et un dossier de DB
          (Get-Content "$clam\freshclam.conf") `
            -replace '#DatabaseMirror ', 'DatabaseMirror ' `
            -replace '#DatabaseDirectory ', 'DatabaseDirectory ' `
            | Set-Content "$clam\freshclam.conf"
          Add-Content "$clam\freshclam.conf" "DatabaseMirror database.clamav.net"
          Add-Content "$clam\freshclam.conf" "DatabaseDirectory $clam\db"
          New-Item -ItemType Directory -Force -Path "$clam\db" | Out-Null
          & "$clam\freshclam.exe" --datadir="$clam\db"

      - name: ClamAV scan (ZIP)
        shell: pwsh
        run: |
          $clam = "C:\Program Files\ClamAV"
          & "$clam\clamscan.exe" --database="$clam\db" -i -r "$PWD\molar_mass_portable_winpython.zip"

      - name: Compute SHA256 (pour release notes)
        id: sha
        shell: pwsh
        run: |
          $f = Get-Item "$PWD\molar_mass_portable_winpython.zip"
          $h = Get-FileHash $f.FullName -Algorithm SHA256
          "sha256=$($h.Hash.ToLower())" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Append local-scan summary to release notes
        shell: pwsh
        run: |
          $sha  = "${{ steps.sha.outputs.sha256 }}"
          $note = @"
          ---
          **Security scans (local)**
          - Microsoft Defender: OK
          - ClamAV: OK
          - SHA256: $sha
          "@
          "RELEASE_NOTES=$note" | Out-File -Append -FilePath $env:GITHUB_ENV

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # ðŸ“¦ Publication (artifact + release)
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: molar_mass_portable_winpython
          path: molar_mass_portable_winpython.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Portable ZIP GUI WinPython Minimal (tkinter, Tensorflow, DECIMER, RDKit uniquement). OptimisÃ© Intel CPU (AVX2/oneDNN/MKL). PrÃªt Ã  l'emploi : aucun tÃ©lÃ©chargement ni installation nÃ©cessaire.

            ${{ env.RELEASE_NOTES }}
          files: molar_mass_portable_winpython.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
